
enclave {
    include "sgx_tcrypto.h"
    #define SYM_KEY_SIZE 32
    trusted {
        public sgx_status_t ecall_process_stats(
            [in, size=signed_data_len] const char* signed_data,
            uint32_t signed_data_len,
            [in, size=sig1_len] const uint8_t* sig1,
            uint32_t sig1_len,
            [in, size=sig2_len] const uint8_t* sig2,
            uint32_t sig2_len,
            [in, size=ciphertext_len] const uint8_t* ciphertext,
            uint32_t ciphertext_len,
            [in, size=iv_len] const uint8_t* iv,
            uint32_t iv_len,
            [in, size=16] const uint8_t* mac,
            [in, string] const char* column_name,
            int op_code,
            [out, size=out_mode_buf_len] char* out_mode_buf,
            uint32_t out_mode_buf_len,
            [out] double* result
        );
	    public sgx_status_t ecall_generate_master_key(int expected_keys);
	    public sgx_status_t ecall_add_wrapping_key([in, size=SYM_KEY_SIZE] uint8_t* key, uint32_t len);
	    public sgx_status_t ecall_get_wrapped_master_key([out, size=max_len] uint8_t* out,
							     uint32_t max_len,
							     [out] uint32_t* used_len);
	    public sgx_status_t ecall_unwrap_master_key();

	public sgx_status_t ecall_prepare_unwrapping([in, size=wrapped_len] const uint8_t* wrapped_data, uint32_t wrapped_len);


        public int ecc_verify(
            [in, size=len] uint8_t* data,
            size_t len,
            [in] sgx_ec256_signature_t* sig,
            int signer_type);

        public sgx_status_t ecall_encrypt_data(
            [in, size=plaintext_len] uint8_t* plaintext,
            size_t plaintext_len,
            [in, size=iv_len] uint8_t* iv,
            size_t iv_len,
            [out, size=plaintext_len] uint8_t* ciphertext,
            [out, size=16] uint8_t* mac
        );
        public sgx_status_t ecall_process_encrypt(
            [in, size=signed_data_len] const char* signed_data,
            uint32_t signed_data_len,
            [in, size=signature_len] const uint8_t* signature,
            uint32_t signature_len
        );
        public sgx_status_t ecall_generate_iv([out, size=iv_len] uint8_t* iv, size_t iv_len);
        public sgx_status_t ecall_sum([in, size=len] double* data, size_t len, [out] double* result);
        public sgx_status_t ecall_mean([in, size=len] double* data, size_t len, [out] double* result);
        public sgx_status_t ecall_min([in, size=len] double* data, size_t len, [out] double* result);
        public sgx_status_t ecall_max([in, size=len] double* data, size_t len, [out] double* result);
        public sgx_status_t ecall_median([in, size=len] double* data, size_t len, [out] double* result);
        public sgx_status_t ecall_mode([in, size=len] double* data, size_t len, [out] double* result);
        public sgx_status_t ecall_variance([in, size=len] double* data, size_t len, [out] double* result);
        public sgx_status_t ecall_stddev([in, size=len] double* data, size_t len, [out] double* result);
        public sgx_status_t ecall_create_report([in, size=512] uint8_t* target_info_buf, [out, size=432] uint8_t* report_buf);


    };

    untrusted {
        void ocall_printf([in, string] const char* str);
        void ocall_get_time([out] uint64_t* t);

        void sgx_thread_wait_untrusted_event_ocall([in, size=1] void* self);
        void sgx_thread_set_untrusted_event_ocall([in, size=1] void* waiter);
        void sgx_thread_setwait_untrusted_events_ocall([in, size=1] void* waiter, [in, size=1] void* self);
        void sgx_thread_set_multiple_untrusted_events_ocall([in, size=1] void* waiters, size_t total);


    };
};
